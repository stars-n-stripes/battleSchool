# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # === PROVIDER PRIORITIES ===
  # Here, we define TWO providers - the VirtualBox one and the Docker one.
  #config.vm.provider "virtualbox"

# Attempting to define router first to support client-side route commands
config.vm.define "tunnel" do |tunnel|
# Using 18.04 since it's the latest LTS version that Snort has thorough installation documentation on.
tunnel.vm.box = "bento/ubuntu-18.04"
# Network adapters that will "bridge" the two networks
# Kali
tunnel.vm.network "private_network", ip: "192.168.31.1", virtualbox__intnet: "student"
# Vuln
tunnel.vm.network "private_network", ip: "192.168.32.1", virtualbox__intnet: "victim"
# Create the "tunnel" user with /bin/true as a shell - this will allow tunnels but not interactive shells.
tunnel.vm.provision "shell", inline: 'useradd -s /bin/true -M tunnel && echo -e "tunnel\ntunnel" | passwd tunnel &> /dev/null'
# Setup snort on the machine
# tunnel.vm.provision "shell", path: "https://raw.githubusercontent.com/stars-n-stripes/battleSchool/master/challenges/ids-example/snort.sh"
# Setup routes for the two other machines
# Not done in this example, as we're testing the student on whether or not they can make their own tunnel
# tunnel.vm.provision "shell", path: "https://raw.githubusercontent.com/stars-n-stripes/battleSchool/master/challenges/ids-example/routing.sh"
end



  # ===STUDENT BOX===
  # You may alter this box's configs, but do NOT change the SSH port forward nor the name of the box
  config.vm.define "kali" do |kali|
	kali.vm.box = "kalilinux/rolling"
    # We're going to use virtualbox__intnet in this scenario because this:
    # 1. Disables DHCP, which sometimes clobbers static Vagrant IPs, and
    # 2. Allows us to enforce the IDS as a MiTM between the student and metasploitable3
	kali.vm.network "private_network", ip: "192.168.31.2", virtualbox__intnet: "student" 
	# Also, force the SSH session to a high port to avoid Vagrant conflicts
	kali.ssh.forward_x11 = true
	# DO NOT CHANGE THE FOLLOWING LINE
	kali.vm.network "forwarded_port", guest: 22, host: 8507, id: "ssh"
	kali.vm.provision "shell", inline:  'sed -i /usr/share/polkit-1/actions/org.freedesktop.color.policy -e "s/<allow_inactive>no<\/allow_inactive>/<allow_inactive>yes<\/allow_inactive>/gm; s/<allow_any>auth_admin<\/allow_any>/<allow_any>yes<\/allow_any>/gm"'
	# This will allow X GUI apps to run in the context of root
	kali.vm.provision "shell", inline: 'mkdir /home/vagrant/bin;  wget https://raw.githubusercontent.com/stars-n-stripes/battleSchool/master/build/xsudo.sh -O /home/vagrant/bin/xsudo.sh && chmod +x /home/vagrant/bin/xsudo.sh && echo alias sudo="/home/vagrant/bin/xsudo.sh" > /home/vagrant/.bash_aliases'

	kali.vm.provision "shell", inline: 'su vagrant -l -c \'export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$UID/bus" && xfconf-query -n -t "bool" -c xfce4-session -p /general/PromptOnLogout -s false\''
    # Special provision for MOTD
    kali.vm.provision "shell", inline: 'echo -e "Welcome, student!\nYou have obtained the credentials tunnel:tunnel for 192.168.31.1, which is accessible via ssh. Your objective is to create a tunnel through 192.168.31.1 that connects to a host on the neighboring .32 subnet. That host is running a netcat service that you should connect to."'
	# Change network card to PCnet-FAST III
	# Ref: https://releases.hashicorp.com/vagrant/2.2.9/vagrant_2.2.9_x86_64.deb
	
	kali.vm.provider "virtualbox" do |vb|
		vb.default_nic_type =  "Am79C973"
		vb.gui = false
	end
	# Specific to this scenario; set router-ids as the default gateway
	#kali.vm.provision "shell", run: "always", inline: "route add default gw 192.168.31.1"
	kali.vm.provision "shell", run: "always", inline: "ip route add 192.168.32.0/24 via 192.168.31.1"	
	# Specific to this scenario; use a trigger to force a reload of kali (for some reason, static IP on intnet only takes after a reboot)
	# ref: vagrantup.com/docs/triggers/configuration#after
	kali.trigger.after :up do |t|
		t.info = "Restarting networking service so static IP assignment can take effect..."
		# t.run = {inline: "systemctl restart network-manager.service"}
		t.run_remote = {inline: "service network-manager restart"}
	end
	
end
  # ===END STUDENT BOX===

config.vm.define "vulnbox" do |vuln|
# Since this is an IDS demonstration, we'll use a target box with all defensive capabilities of burning cardboard
# vuln.vm.box = "rapid7/metasploitable3-ub1404"
tunnel.vm.box = "bento/ubuntu-18.04"
vuln.vm.network "private_network", ip: "192.168.32.2", virtualbox__intnet: "victim"
# Specific to this scenario; set router-ids as the default gateway
# vuln.vm.provision "shell", run: "always", inline: "route add default gw 192.168.32.1"	
vuln.vm.provision "shell", run: "always", inline: "ip route add 192.168.31.0/24 via 192.168.32.1"


end
  
  end


